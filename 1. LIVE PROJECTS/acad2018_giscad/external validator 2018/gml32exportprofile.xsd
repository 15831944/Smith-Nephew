<?xml version="1.0" encoding="utf-8"?>
<xsd:schema targetNamespace="http://www.opengis.net/gml" xmlns="http://www.w3.org/2001/XMLSchema" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:sch="http://www.ascc.net/xml/schematron" xmlns:gml="http://www.opengis.net/gml" elementFormDefault="qualified" version="3.2.0">
	<xsd:annotation>
		<xsd:documentation>GML Subset schema for Intergraph Profile</xsd:documentation>
	</xsd:annotation>
	<xsd:import namespace="http://www.w3.org/1999/xlink" schemaLocation="xlinks.xsd"/>
	<!-- ================================================= -->
	<xsd:element name="_Feature" type="gml:AbstractFeatureType" abstract="true" substitutionGroup="gml:_GML"/>
	<!-- ================================================= -->
	<xsd:complexType name="AbstractFeatureType" abstract="true">
		<xsd:annotation>
			<xsd:documentation> An abstract feature provides a set of common properties, including id, metaDataProperty, name and description inherited from AbstractGMLType, plus boundedBy.    A concrete feature type must derive from this type and specify additional  properties in an application schema. A feature must possess an identifying attribute ('id' - 'fid' has been deprecated).  </xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="gml:AbstractGMLType">
				<xsd:sequence>
					<xsd:element ref="gml:boundedBy" minOccurs="0"/>
					<xsd:element ref="gml:location" minOccurs="0">
						<xsd:annotation>
							<xsd:appinfo>deprecated</xsd:appinfo>
							<xsd:documentation>deprecated in GML version 3.1</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<!-- =========================================================== -->
	<xsd:element name="_FeatureCollection" type="gml:AbstractFeatureCollectionType" abstract="true" substitutionGroup="gml:_Feature"/>
	<!-- ===========================================================   -->
	<xsd:complexType name="AbstractFeatureCollectionType" abstract="true">
		<xsd:annotation>
			<xsd:documentation> A feature collection contains zero or more features.  </xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="gml:AbstractFeatureType">
				<xsd:sequence>
					<xsd:element ref="gml:featureMember" minOccurs="0" maxOccurs="unbounded"/>
					<xsd:element ref="gml:featureMembers" minOccurs="0"/>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<!-- =========================================================== -->
	<xsd:element name="FeatureCollection" type="gml:FeatureCollectionType" substitutionGroup="gml:_Feature"/>
	<!-- =========================================================== -->
	<xsd:complexType name="FeatureCollectionType">
		<xsd:annotation>
			<xsd:documentation> Concrete generic feature collection.  </xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="gml:AbstractFeatureCollectionType"/>
		</xsd:complexContent>
	</xsd:complexType>
	<!-- ============================================================== -->
	<xsd:element name="featureMember" type="gml:FeaturePropertyType"/>
	<!-- ============================================================== -->
	<xsd:complexType name="FeaturePropertyType">
		<xsd:annotation>
			<xsd:documentation>Container for a feature - follow gml:AssociationType pattern.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element ref="gml:_Feature" minOccurs="0"/>
		</xsd:sequence>
		<xsd:attributeGroup ref="gml:AssociationAttributeGroup"/>
	</xsd:complexType>
	<!-- ============================================================== -->
	<xsd:element name="featureMembers" type="gml:FeatureArrayPropertyType"/>
	<!-- =========================================================== -->
	<xsd:complexType name="FeatureArrayPropertyType">
		<xsd:annotation>
			<xsd:documentation>Container for features - follow gml:ArrayAssociationType pattern.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element ref="gml:_Feature" minOccurs="0" maxOccurs="unbounded"/>
		</xsd:sequence>
	</xsd:complexType>
	<!-- ============================================================== -->
	<xsd:complexType name="AbstractGMLType" abstract="true">
		<xsd:annotation>
			<xsd:documentation>All complexContent GML elements are directly or indirectly derived from this abstract supertype 
	to establish a hierarchy of GML types that may be distinguished from other XML types by their ancestry. 
	Elements in this hierarchy may have an ID and are thus referenceable.  </xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:group ref="gml:StandardObjectProperties"/>
		</xsd:sequence>
		<xsd:attribute ref="gml:id" use="optional"/>
	</xsd:complexType>
	<!-- ================================================= -->
	<xsd:group name="StandardObjectProperties">
		<xsd:annotation>
			<xsd:documentation>This content model group makes it easier to construct types that 
      derive from AbstractGMLType and its descendents "by restriction".  
      A reference to the group saves having to enumerate the standard object properties.  </xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element ref="gml:metaDataProperty" minOccurs="0" maxOccurs="unbounded"/>
			<xsd:element ref="gml:description" minOccurs="0"/>
			<xsd:element ref="gml:name" minOccurs="0" maxOccurs="unbounded">
				<xsd:annotation>
					<xsd:documentation>Multiple names may be provided.  These will often be distinguished by being assigned by different authorities, as indicated by the value of the codeSpace attribute.  In an instance document there will usually only be one name per authority. </xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
	</xsd:group>
	<!-- ================================================= -->
	<xsd:element name="metaDataProperty" type="gml:MetaDataPropertyType">
		<xsd:annotation>
			<xsd:documentation>Contains or refers to a metadata package that contains metadata properties.  </xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<!-- ================================================= -->
	<xsd:complexType name="MetaDataPropertyType">
		<xsd:annotation>
			<xsd:documentation>Base type for complex metadata property types.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence minOccurs="0">
			<xsd:any processContents="lax"/>
			<!--<element ref="gml:_MetaData"/>-->
		</xsd:sequence>
		<xsd:attributeGroup ref="gml:AssociationAttributeGroup"/>
		<xsd:attribute name="about" type="anyURI" use="optional"/>
	</xsd:complexType>
	<!-- =========== Abstract Metadata supertype ========================= -->
	<xsd:element name="_MetaData" type="gml:AbstractMetaDataType" abstract="true" substitutionGroup="gml:_Object">
		<xsd:annotation>
			<xsd:documentation>Abstract element which acts as the head of a substitution group for packages of MetaData properties.  </xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<!-- =========================================================== -->
	<xsd:complexType name="AbstractMetaDataType" abstract="true" mixed="true">
		<xsd:annotation>
			<xsd:documentation> An abstract base type for complex metadata types.</xsd:documentation>
		</xsd:annotation>
		<xsd:attribute ref="gml:id" use="optional"/>
	</xsd:complexType>
	<!-- ================================================= -->
	<xsd:attribute name="id" type="ID">
		<xsd:annotation>
			<xsd:documentation>Database handle for the object.  It is of XML type “ID”, so is constrained to be unique in the XML document within which it occurs.  An external identifier for the object in the form of a URI may be constructed using standard XML and XPointer methods.  This is done by concatenating the URI for the document, a fragment separator “#”, and the value of the id attribute.  </xsd:documentation>
		</xsd:annotation>
	</xsd:attribute>
	<!-- ================================================= -->
	<xsd:element name="_Object" abstract="true">
		<xsd:annotation>
			<xsd:documentation>This abstract element is the head of a substitutionGroup hierararchy which may contain either simpleContent or complexContent elements.  It is used to assert the model position of "class" elements declared in other GML schemas.  </xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<!-- ================================================= -->
	<xsd:attributeGroup name="AssociationAttributeGroup">
		<xsd:annotation>
			<xsd:documentation>Attribute group used to enable property elements to refer to their value remotely. It contains the “simple link” components from xlinks.xsd, with all members “optional”, and the remoteSchema attribute, which is also optional.  These attributes can be attached to any element, thus allowing it to act as a pointer. The 'remoteSchema' attribute allows an element  that carries link attributes to indicate that the element is declared  in a remote schema rather than by the schema that constrains the current document instance. </xsd:documentation>
		</xsd:annotation>
		<xsd:attributeGroup ref="xlink:simpleLink"/>
		<xsd:attribute ref="gml:remoteSchema" use="optional"/>
	</xsd:attributeGroup>
	<!-- ================================================= -->
	<xsd:attribute name="remoteSchema" type="anyURI">
		<xsd:annotation>
			<xsd:documentation>Reference to an XML Schema fragment that specifies the content model of the property’s value. This is in conformance with the XML Schema Section 4.14 Referencing Schemas from Elsewhere. </xsd:documentation>
		</xsd:annotation>
	</xsd:attribute>
	<!-- ================================================= -->
	<xsd:element name="description" type="gml:StringOrRefType">
		<xsd:annotation>
			<xsd:documentation>Contains a simple text description of the object, or refers to an external description.  </xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<!-- ================================================= -->
	<xsd:complexType name="StringOrRefType">
		<xsd:annotation>
			<xsd:documentation>
This type is available wherever there is a need for a "text" type property. It is of string type, so the text can be included inline, but the value can also be referenced remotely via xlinks from the AssociationAttributeGroup. If the remote reference is present, then the value obtained by traversing the link should be used, and the string content of the element can be used for an annotation.  </xsd:documentation>
		</xsd:annotation>
		<xsd:simpleContent>
			<xsd:extension base="string">
				<xsd:attributeGroup ref="gml:AssociationAttributeGroup"/>
			</xsd:extension>
		</xsd:simpleContent>
	</xsd:complexType>
	<!-- ================================================= -->
	<xsd:element name="name" type="gml:CodeType">
		<xsd:annotation>
			<xsd:documentation>Label for the object, normally a descriptive name. An object may have several names, typically assigned by different authorities.  The authority for a name is indicated by the value of its (optional) codeSpace attribute.  The name may or may not be unique, as determined by the rules of the organization responsible for the codeSpace. </xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<!-- ================================================= -->
	<xsd:complexType name="CodeType">
		<xsd:annotation>
			<xsd:documentation>Name or code with an (optional) authority.  Text token.  
      If the codeSpace attribute is present, then its value should identify a dictionary, thesaurus 
      or authority for the term, such as the organisation who assigned the value, 
      or the dictionary from which it is taken.  
      A text string with an optional codeSpace attribute. </xsd:documentation>
		</xsd:annotation>
		<xsd:simpleContent>
			<xsd:extension base="string">
				<xsd:attribute name="codeSpace" type="anyURI" use="optional"/>
			</xsd:extension>
		</xsd:simpleContent>
	</xsd:complexType>
	<!-- ================================================= -->
	<xsd:element name="boundedBy" type="gml:BoundingShapeType"/>
	<!-- ================================================= -->
	<xsd:complexType name="BoundingShapeType">
		<xsd:annotation>
			<xsd:documentation>Bounding shape.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:choice>
				<xsd:element ref="gml:Envelope"/>
				<xsd:element ref="gml:Null"/>
			</xsd:choice>
		</xsd:sequence>
	</xsd:complexType>
	<!-- ================================================= -->
	<xsd:element name="Envelope" type="gml:EnvelopeType"/>
	<!-- ================================================= -->
	<xsd:complexType name="EnvelopeType">
		<xsd:annotation>
			<xsd:documentation>Envelope defines an extent using a pair of positions defining opposite corners in arbitrary dimensions. The first direct position is the "lower corner" (a coordinate position consisting of all the minimal ordinates for each dimension for all points within the envelope), the second one the "upper corner" (a coordinate position consisting of all the maximal ordinates for each dimension for all points within the envelope).</xsd:documentation>
		</xsd:annotation>
		<xsd:choice>
			<xsd:sequence>
				<xsd:element name="lowerCorner" type="gml:DirectPositionType"/>
				<xsd:element name="upperCorner" type="gml:DirectPositionType"/>
			</xsd:sequence>
			<xsd:element ref="gml:coord" minOccurs="2" maxOccurs="2">
				<xsd:annotation>
					<xsd:appinfo>deprecated</xsd:appinfo>
					<xsd:documentation>deprecated with GML version 3.0</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element ref="gml:pos" minOccurs="2" maxOccurs="2">
				<xsd:annotation>
					<xsd:appinfo>deprecated</xsd:appinfo>
					<xsd:documentation>Deprecated with GML version 3.1. Use the explicit properties "lowerCorner" and "upperCorner" instead.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element ref="gml:coordinates">
				<xsd:annotation>
					<xsd:documentation>Deprecated with GML version 3.1.0. Use the explicit properties "lowerCorner" and "upperCorner" instead.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:choice>
		<xsd:attributeGroup ref="gml:SRSReferenceGroup"/>
	</xsd:complexType>
	<!-- =========================================================== -->
	<!--  	 	The following types and elements are deprecated and should not be used ! 	 	-->
	<xsd:element name="coord" type="gml:CoordType">
		<xsd:annotation>
			<xsd:documentation>Deprecated with GML 3.0 and included for backwards compatibility with GML 2. Use the "pos" element instead.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="CoordType">
		<xsd:annotation>
			<xsd:documentation>Represents a coordinate tuple in one, two, or three dimensions. Deprecated with GML 3.0 and replaced by DirectPositionType.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element name="X" type="decimal"/>
			<xsd:element name="Y" type="decimal" minOccurs="0"/>
			<xsd:element name="Z" type="decimal" minOccurs="0"/>
		</xsd:sequence>
	</xsd:complexType>
	<!-- ============================================================== -->
	<xsd:element name="coordinates" type="gml:CoordinatesType">
		<xsd:annotation>
			<xsd:documentation>Deprecated with GML version 3.1.0.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<!-- =========================================================== -->
	<xsd:complexType name="CoordinatesType">
		<xsd:annotation>
			<xsd:documentation>Tables or arrays of tuples.  
        May be used for text-encoding of values from a table.  
        Actually just a string, but allows the user to indicate which characters are used as separators.  
        The value of the 'cs' attribute is the separator for coordinate values, 
        and the value of the 'ts' attribute gives the tuple separator (a single space by default); 
        the default values may be changed to reflect local usage.
        Defaults to CSV within a tuple, space between tuples.  
        However, any string content will be schema-valid.  </xsd:documentation>
		</xsd:annotation>
		<xsd:simpleContent>
			<xsd:extension base="string">
				<xsd:attribute name="decimal" type="string" default="."/>
				<xsd:attribute name="cs" type="string" default=","/>
				<xsd:attribute name="ts" type="string" default="&#x20;"/>
			</xsd:extension>
		</xsd:simpleContent>
	</xsd:complexType>
	<!-- ================================================= -->
	<xsd:complexType name="DirectPositionType">
		<xsd:annotation>
			<xsd:documentation>DirectPosition instances hold the coordinates for a position within some coordinate reference system (CRS). Since DirectPositions, as data types, will often be included in larger objects (such as geometry elements) that have references to CRS, the "srsName" attribute will in general be missing, if this particular DirectPosition is included in a larger element with such a reference to a CRS. In this case, the CRS is implicitly assumed to take on the value of the containing object's CRS.</xsd:documentation>
		</xsd:annotation>
		<xsd:simpleContent>
			<xsd:extension base="gml:doubleList">
				<xsd:attributeGroup ref="gml:SRSReferenceGroup"/>
			</xsd:extension>
		</xsd:simpleContent>
	</xsd:complexType>
	<!-- ================================================= -->
	<xsd:simpleType name="doubleList">
		<xsd:annotation>
			<xsd:documentation>XML List based on XML Schema double type.  An element of this type contains a space-separated list of double values</xsd:documentation>
		</xsd:annotation>
		<xsd:list itemType="double"/>
	</xsd:simpleType>
	<!-- ================================================= -->
	<!-- ================================================= -->
	<xsd:attributeGroup name="SRSReferenceGroup">
		<xsd:annotation>
			<xsd:documentation>Optional reference to the CRS used by this geometry, with optional additional information to simplify use when a more complete definition of the CRS is not needed. </xsd:documentation>
		</xsd:annotation>
		<xsd:attribute name="srsName" type="anyURI" use="optional">
			<xsd:annotation>
				<xsd:documentation>In general this reference points to a CRS instance of gml:CoordinateReferenceSystemType (see coordinateReferenceSystems.xsd). For well known references it is not required that the CRS description exists at the location the URI points to. If no srsName attribute is given, the CRS must be specified as part of the larger context this geometry element is part of, e.g. a geometric element like point, curve, etc. It is expected that this attribute will be specified at the direct position level only in rare cases.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="srsDimension" type="positiveInteger" use="optional">
			<xsd:annotation>
				<xsd:documentation>The "srsDimension" is the length of coordinate sequence (the number of entries in the list). This dimension is specified by the coordinate reference system. When the srsName attribute is omitted, this attribute shall be omitted. </xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attributeGroup ref="gml:SRSInformationGroup"/>
	</xsd:attributeGroup>
	<!-- ================================================= -->
	<xsd:attributeGroup name="SRSInformationGroup">
		<xsd:annotation>
			<xsd:documentation>Optional additional and redundant information for a CRS to simplify use when a more complete definition of the CRS is not needed. This information shall be the same as included in the more complete definition of the CRS, referenced by the srsName attribute. When the srsName attribute is included, either both or neither of the axisLabels and uomLabels attributes shall be included. When the srsName attribute is omitted, both of these attributes shall be omitted. </xsd:documentation>
		</xsd:annotation>
		<xsd:attribute name="axisLabels" type="gml:NCNameList" use="optional">
			<xsd:annotation>
				<xsd:documentation>Ordered list of labels for all the axes of this CRS. The gml:axisAbbrev value should be used for these axis labels, after spaces and forbiddden characters are removed. When the srsName attribute is included, this attribute is optional. When the srsName attribute is omitted, this attribute shall also be omitted. </xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="uomLabels" type="gml:NCNameList" use="optional">
			<xsd:annotation>
				<xsd:documentation>Ordered list of unit of measure (uom) labels for all the axes of this CRS. The value of the string in the gml:catalogSymbol should be used for this uom labels, after spaces and forbiddden characters are removed. When the axisLabels attribute is included, this attribute shall also be included. When the axisLabels attribute is omitted, this attribute shall also be omitted. </xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:attributeGroup>
	<!-- ================================================= -->
	<xsd:simpleType name="NCNameList">
		<xsd:annotation>
			<xsd:documentation>A set of values, representing a list of token with the lexical value space of NCName. The tokens are seperated by whitespace.</xsd:documentation>
		</xsd:annotation>
		<xsd:list itemType="NCName"/>
	</xsd:simpleType>
	<!-- ================================================= -->
	<xsd:element name="pos" type="gml:DirectPositionType">
		<xsd:annotation>
			<xsd:appinfo>
				<sch:pattern>
					<sch:rule context="gml:pos">
						<sch:extends rule="CRSLabels"/>
					</sch:rule>
				</sch:pattern>
			</xsd:appinfo>
		</xsd:annotation>
	</xsd:element>
	<!-- ================================================= -->
	<xsd:element name="_Geometry" type="gml:AbstractGeometryType" abstract="true" substitutionGroup="gml:_GML">
		<xsd:annotation>
			<xsd:documentation>The "_Geometry" element is the abstract head of the substituition group for all geometry elements of GML 3. This includes pre-defined and user-defined geometry elements. Any geometry element must be a direct or indirect extension/restriction of AbstractGeometryType and must be directly or indirectly in the substitution group of "_Geometry".</xsd:documentation>
			<xsd:appinfo>
				<sch:pattern>
					<sch:rule context="gml:_Geometry">
						<sch:extends rule="CRSLabels"/>
					</sch:rule>
				</sch:pattern>
			</xsd:appinfo>
		</xsd:annotation>
	</xsd:element>
	<!-- ================================================= -->
	<xsd:complexType name="AbstractGeometryType" abstract="true">
		<xsd:annotation>
			<xsd:documentation>All geometry elements are derived directly or indirectly from this abstract supertype. A geometry element may have an identifying attribute ("gml:id"), a name (attribute "name") and a description (attribute "description"). It may be associated with a spatial reference system (attribute "srsName"). The following rules shall be adhered: - Every geometry type shall derive from this abstract type. - Every geometry element (i.e. an element of a geometry type) shall be directly or indirectly in the substitution group of _Geometry.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="gml:AbstractGMLType">
				<xsd:attribute name="gid" type="string" use="optional">
					<xsd:annotation>
						<xsd:documentation>This attribute is included for backward compatibility with GML 2 and is deprecated with GML 3. This identifer is superceded by "gml:id" inherited from AbstractGMLType. The attribute "gid" should not be used anymore and may be deleted in future versions of GML without further notice.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attributeGroup ref="gml:SRSReferenceGroup"/>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<!-- ============================================================== -->
	<xsd:complexType name="GeometryPropertyType">
		<xsd:annotation>
			<xsd:documentation>A geometric property can either be any geometry element encapsulated in an element of this type or an XLink reference to a remote geometry element (where remote includes geometry elements located elsewhere in the same document). Note that either the reference or the contained element must be given, but not both or none.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element ref="gml:_Geometry" minOccurs="0"/>
		</xsd:sequence>
		<xsd:attributeGroup ref="gml:AssociationAttributeGroup">
			<xsd:annotation>
				<xsd:documentation>This attribute group includes the XLink attributes (see xlinks.xsd). XLink is used in GML to reference remote resources (including those elsewhere in the same document). A simple link element can be constructed by including a specific set of XLink attributes. The XML Linking Language (XLink) is currently a Proposed Recommendation of the World Wide Web Consortium. XLink allows elements to be inserted into XML documents so as to create sophisticated links between resources; such links can be used to reference remote properties. A simple link element can be used to implement pointer functionality, and this functionality has been built into various GML 3 elements by including the gml:AssociationAttributeGroup.</xsd:documentation>
			</xsd:annotation>
		</xsd:attributeGroup>
	</xsd:complexType>
	<!-- ================================================= -->
	<xsd:element name="_GML" type="gml:AbstractGMLType" abstract="true" substitutionGroup="gml:_Object">
		<xsd:annotation>
			<xsd:documentation>Global element which acts as the head of a substitution group that may include any element which is a GML feature, object, geometry or complex value</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<!-- ================================================= -->
	<xsd:element name="Null" type="gml:NullType"/>
	<!-- ================================================= -->
	<xsd:simpleType name="NullType">
		<xsd:annotation>
			<xsd:documentation>Utility type for null elements.  The value may be selected from one of the enumerated tokens, or may be a URI in which case this should identify a resource which describes the reason for the null. </xsd:documentation>
		</xsd:annotation>
		<xsd:union memberTypes="gml:NullEnumeration anyURI"/>
	</xsd:simpleType>
	<!-- ================================================= -->
	<xsd:simpleType name="NullEnumeration">
		<xsd:annotation>
			<xsd:documentation> Some common reasons for a null value:   
			
        innapplicable - the object does not have a value
        missing - The correct value is not readily available to the sender of this data.  
                           Furthermore, a correct value may not exist.
        template - the value will be available later
        unknown - The correct value is not known to, and not computable by, the sender of this data. 
                           However, a correct value probably exists.
        withheld - the value is not divulged 
        
        other:reason - as indicated by "reason" string
        
        Specific communities may agree to assign more strict semantics when these terms are used in a particular context.  
      </xsd:documentation>
		</xsd:annotation>
		<xsd:union>
			<xsd:simpleType>
				<xsd:restriction base="string">
					<xsd:enumeration value="inapplicable"/>
					<xsd:enumeration value="missing"/>
					<xsd:enumeration value="template"/>
					<xsd:enumeration value="unknown"/>
					<xsd:enumeration value="withheld"/>
				</xsd:restriction>
			</xsd:simpleType>
			<xsd:simpleType>
				<xsd:restriction base="string">
					<xsd:pattern value="other:\w{2,}"/>
				</xsd:restriction>
			</xsd:simpleType>
		</xsd:union>
	</xsd:simpleType>
	<!-- ================================================= -->
	<xsd:element name="Point" type="gml:PointType" substitutionGroup="gml:_GeometricPrimitive"/>
	<!-- ================================================= -->
	<xsd:complexType name="PointType">
		<xsd:annotation>
			<xsd:documentation>A Point is defined by a single coordinate tuple.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="gml:AbstractGeometricPrimitiveType">
				<xsd:sequence>
					<xsd:choice>
						<xsd:annotation>
							<xsd:documentation>GML supports two different ways to specify the direct poisiton of a point. 1. The "pos" element is of type DirectPositionType.</xsd:documentation>
						</xsd:annotation>
						<xsd:element ref="gml:pos"/>
						<xsd:element ref="gml:coordinates">
							<xsd:annotation>
								<xsd:documentation>Deprecated with GML version 3.1.0 for coordinates with ordinate values that are numbers. Use "pos" instead. The "coordinates" element shall only be used for coordinates with ordinates that require a string representation, e.g. DMS representations.</xsd:documentation>
							</xsd:annotation>
						</xsd:element>
						<xsd:element ref="gml:coord">
							<xsd:annotation>
								<xsd:documentation>Deprecated with GML version 3.0. Use "pos" instead. The "coord" element is included for backwards compatibility with GML 2.</xsd:documentation>
							</xsd:annotation>
						</xsd:element>
					</xsd:choice>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<!-- ================================================= -->
	<xsd:complexType name="AbstractGeometricPrimitiveType" abstract="true">
		<xsd:annotation>
			<xsd:documentation>This is the abstract root type of the geometric primitives. A geometric primitive is a geometric object that is not decomposed further into other primitives in the system. All primitives are oriented in the direction implied by the sequence of their coordinate tuples.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="gml:AbstractGeometryType"/>
		</xsd:complexContent>
	</xsd:complexType>
	<!-- ================================================= -->
	<xsd:element name="_GeometricPrimitive" type="gml:AbstractGeometricPrimitiveType" abstract="true" substitutionGroup="gml:_Geometry">
		<xsd:annotation>
			<xsd:documentation>The "_GeometricPrimitive" element is the abstract head of the substituition group for all (pre- and user-defined) geometric primitives.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<!-- ================================================= -->
	<xsd:element name="Curve" type="gml:CurveType" substitutionGroup="gml:_Curve"/>
	<!-- ================================================= -->
	<xsd:complexType name="CurveType">
		<xsd:annotation>
			<xsd:documentation>
				Curve is a 1-dimensional primitive. Curves are continuous, connected, and have a measurable length in terms of the coordinate system. 
				A curve is composed of one or more curve segments. Each curve segment within a curve may be defined using a different interpolation method. The curve segments are connected to one another, with the end point of each segment except the last being the start point of the next segment in the segment list.
				The orientation of the curve is positive.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="gml:AbstractCurveType">
				<xsd:sequence>
					<xsd:element ref="gml:segments">
						<xsd:annotation>
							<xsd:documentation>This element encapsulates the segments of the curve.</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<!-- ================================================= -->
	<xsd:complexType name="AbstractCurveType" abstract="true">
		<xsd:annotation>
			<xsd:documentation>An abstraction of a curve to support the different levels of complexity. The curve can always be viewed as a geometric primitive, i.e. is continuous.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="gml:AbstractGeometricPrimitiveType"/>
		</xsd:complexContent>
	</xsd:complexType>
	<!-- ================================================= -->
	<xsd:element name="segments" type="gml:CurveSegmentArrayPropertyType">
		<xsd:annotation>
			<xsd:documentation>This property element contains a list of curve segments. The order of the elements is significant and shall be preserved when processing the array.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<!-- ================================================= -->
	<xsd:complexType name="CurveSegmentArrayPropertyType">
		<xsd:annotation>
			<xsd:documentation>A container for an array of curve segments.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element ref="gml:_CurveSegment" minOccurs="0" maxOccurs="unbounded"/>
		</xsd:sequence>
	</xsd:complexType>
	<!-- ================================================= -->
	<xsd:element name="_CurveSegment" type="gml:AbstractCurveSegmentType" abstract="true">
		<xsd:annotation>
			<xsd:documentation>The "_CurveSegment" element is the abstract head of the substituition group for all curve segment elements, i.e. continuous segments of the same interpolation mechanism.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<!-- ================================================= -->
	<xsd:complexType name="AbstractCurveSegmentType" abstract="true">
		<xsd:annotation>
			<xsd:documentation>
				Curve segment defines a homogeneous segment of a curve.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:attribute name="numDerivativesAtStart" type="integer" use="optional" default="0">
			<xsd:annotation>
				<xsd:documentation>The attribute "numDerivativesAtStart" specifies the type of continuity between this curve segment and its predecessor. If this is the first curve segment in the curve, one of these values, as appropriate, is ignored. The default value of "0" means simple continuity, which is a mandatory minimum level of continuity. This level is referred to as "C 0 " in mathematical texts. A value of 1 means that the function and its first derivative are continuous at the appropriate end point: "C 1 " continuity. A value of "n" for any integer means the function and its first n derivatives are continuous: "C n " continuity.
NOTE: Use of these values is only appropriate when the basic curve definition is an underdetermined system. For example, line string segments cannot support continuity above C 0 , since there is no spare control parameter to adjust the incoming angle at the end points of the segment. Spline functions on the other hand often have extra degrees of freedom on end segments that allow them to adjust the values of the derivatives to support C 1 or higher continuity.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="numDerivativesAtEnd" type="integer" use="optional" default="0">
			<xsd:annotation>
				<xsd:documentation>The attribute "numDerivativesAtEnd" specifies the type of continuity between this curve segment and its successor. If this is the last curve segment in the curve, one of these values, as appropriate, is ignored. The default value of "0" means simple continuity, which is a mandatory minimum level of continuity. This level is referred to as "C 0 " in mathematical texts. A value of 1 means that the function and its first derivative are continuous at the appropriate end point: "C 1 " continuity. A value of "n" for any integer means the function and its first n derivatives are continuous: "C n " continuity.
NOTE: Use of these values is only appropriate when the basic curve definition is an underdetermined system. For example, line string segments cannot support continuity above C 0 , since there is no spare control parameter to adjust the incoming angle at the end points of the segment. Spline functions on the other hand often have extra degrees of freedom on end segments that allow them to adjust the values of the derivatives to support C 1 or higher continuity.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="numDerivativeInterior" type="integer" use="optional" default="0">
			<xsd:annotation>
				<xsd:documentation>The attribute "numDerivativesInterior" specifies the type of continuity that is guaranteed interior to the curve. The default value of "0" means simple continuity, which is a mandatory minimum level of continuity. This level is referred to as "C 0 " in mathematical texts. A value of 1 means that the function and its first derivative are continuous at the appropriate end point: "C 1 " continuity. A value of "n" for any integer means the function and its first n derivatives are continuous: "C n " continuity.
NOTE: Use of these values is only appropriate when the basic curve definition is an underdetermined system. For example, line string segments cannot support continuity above C 0 , since there is no spare control parameter to adjust the incoming angle at the end points of the segment. Spline functions on the other hand often have extra degrees of freedom on end segments that allow them to adjust the values of the derivatives to support C 1 or higher continuity.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>
	<!-- ================================================= -->
	<xsd:element name="_Curve" type="gml:AbstractCurveType" abstract="true" substitutionGroup="gml:_GeometricPrimitive">
		<xsd:annotation>
			<xsd:documentation>The "_Curve" element is the abstract head of the substituition group for all (continuous) curve elements.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<!-- ================================================= -->
	<xsd:element name="LineStringSegment" type="gml:LineStringSegmentType" substitutionGroup="gml:_CurveSegment"/>
	<!-- ================================================= -->
	<xsd:complexType name="LineStringSegmentType">
		<xsd:annotation>
			<xsd:documentation>
				A LineStringSegment is a curve segment that is defined by two or more coordinate tuples, with linear interpolation between them.
				Note: LineStringSegment implements GM_LineString of ISO 19107.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="gml:AbstractCurveSegmentType">
				<xsd:sequence>
					<xsd:choice>
						<xsd:annotation>
							<xsd:documentation>GML supports two different ways to specify the control points of a curve segment.
1. A sequence of "pos" (DirectPositionType) or "pointProperty" (PointPropertyType) elements. "pos" elements are control points that are only part of this curve segment, "pointProperty" elements contain a point that may be referenced from other geometry elements or reference another point defined outside of this curve segment (reuse of existing points).
2. The "posList" element allows for a compact way to specifiy the coordinates of the control points, if all control points are in the same coordinate reference systems and belong to this curve segment only. The number of direct positions in the list must be at least two.</xsd:documentation>
						</xsd:annotation>
						<xsd:choice minOccurs="2" maxOccurs="unbounded">
							<xsd:element ref="gml:pos"/>
							<xsd:element ref="gml:pointProperty"/>
							<xsd:element ref="gml:pointRep">
								<xsd:annotation>
									<xsd:documentation>Deprecated with GML version 3.1.0. Use "pointProperty" instead. Included for backwards compatibility with GML 3.0.0.</xsd:documentation>
								</xsd:annotation>
							</xsd:element>
						</xsd:choice>
						<xsd:element ref="gml:posList"/>
						<xsd:element ref="gml:coordinates">
							<xsd:annotation>
								<xsd:documentation>Deprecated with GML version 3.1.0. Use "posList" instead.</xsd:documentation>
							</xsd:annotation>
						</xsd:element>
					</xsd:choice>
				</xsd:sequence>
				<xsd:attribute name="interpolation" type="gml:CurveInterpolationType" fixed="linear">
					<xsd:annotation>
						<xsd:documentation>The attribute "interpolation" specifies the curve interpolation mechanism used for this segment. This mechanism
uses the control points and control parameters to determine the position of this curve segment. For a LineStringSegment the interpolation is fixed as "linear".</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<!-- ============================================================== -->
	<xsd:element name="pointRep" type="gml:PointPropertyType">
		<xsd:annotation>
			<xsd:documentation>Deprecated with GML version 3.1.0. Use "pointProperty" instead. Included for backwards compatibility with GML 3.0.0.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<!-- ================================================= -->
	<xsd:element name="pointProperty" type="gml:PointPropertyType">
		<xsd:annotation>
			<xsd:appinfo>
				<sch:pattern>
					<sch:rule context="gml:pointProperty">
						<sch:extends rule="hrefOrContent"/>
					</sch:rule>
				</sch:pattern>
			</xsd:appinfo>
			<xsd:documentation>This property element either references a point via the XLink-attributes or contains the point element. pointProperty is the predefined property which can be used by GML Application Schemas whenever a GML Feature has a property with a value that is substitutable for Point.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<!-- ================================================= -->
	<xsd:complexType name="PointPropertyType">
		<xsd:annotation>
			<xsd:documentation>A property that has a point as its value domain can either be an appropriate geometry element encapsulated in an element of this type or an XLink reference to a remote geometry element (where remote includes geometry elements located elsewhere in the same document). Either the reference or the contained element must be given, but neither both nor none.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence minOccurs="0">
			<xsd:element ref="gml:Point"/>
		</xsd:sequence>
		<xsd:attributeGroup ref="gml:AssociationAttributeGroup">
			<xsd:annotation>
				<xsd:documentation>This attribute group includes the XLink attributes (see xlinks.xsd). XLink is used in GML to reference remote resources (including those elsewhere in the same document). A simple link element can be constructed by including a specific set of XLink attributes. The XML Linking Language (XLink) is currently a Proposed Recommendation of the World Wide Web Consortium. XLink allows elements to be inserted into XML documents so as to create sophisticated links between resources; such links can be used to reference remote properties. A simple link element can be used to implement pointer functionality, and this functionality has been built into various GML 3 elements by including the gml:AssociationAttributeGroup. 				</xsd:documentation>
			</xsd:annotation>
		</xsd:attributeGroup>
	</xsd:complexType>
	<!-- ================================================= -->
	<xsd:element name="posList" type="gml:DirectPositionListType">
		<xsd:annotation>
			<xsd:appinfo>
				<sch:pattern>
					<sch:rule context="gml:posList">
						<sch:extends rule="CRSLabels"/>
					</sch:rule>
				</sch:pattern>
			</xsd:appinfo>
			<xsd:appinfo>
				<sch:pattern>
					<sch:rule context="gml:posList">
						<sch:extends rule="Count"/>
					</sch:rule>
				</sch:pattern>
			</xsd:appinfo>
		</xsd:annotation>
	</xsd:element>
	<!-- ================================================= -->
	<xsd:complexType name="DirectPositionListType">
		<xsd:annotation>
			<xsd:documentation>DirectPositionList instances hold the coordinates for a sequence of direct positions within the same coordinate reference system (CRS).</xsd:documentation>
		</xsd:annotation>
		<xsd:simpleContent>
			<xsd:extension base="gml:doubleList">
				<xsd:attributeGroup ref="gml:SRSReferenceGroup"/>
				<xsd:attribute name="count" type="positiveInteger" use="optional">
					<xsd:annotation>
						<xsd:documentation>"count" allows to specify the number of direct positions in the list. If the attribute “count” is present then the attribute “srsDimension” shall be present, too.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:simpleContent>
	</xsd:complexType>
	<!-- ================================================= -->
	<xsd:simpleType name="CurveInterpolationType">
		<xsd:annotation>
			<xsd:documentation>CurveInterpolationType is a list of codes that may be used to identify the interpolation mechanisms specified by an
application schema.</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="string">
			<xsd:enumeration value="linear"/>
			<xsd:enumeration value="geodesic"/>
			<xsd:enumeration value="circularArc3Points"/>
			<xsd:enumeration value="circularArc2PointWithBulge"/>
			<xsd:enumeration value="circularArcCenterPointWithRadius"/>
			<xsd:enumeration value="elliptical"/>
			<xsd:enumeration value="clothoid"/>
			<xsd:enumeration value="conic"/>
			<xsd:enumeration value="polynomialSpline"/>
			<xsd:enumeration value="cubicSpline"/>
			<xsd:enumeration value="rationalSpline"/>
		</xsd:restriction>
	</xsd:simpleType>
	<!-- ================================================= -->
	<xsd:element name="Arc" type="gml:ArcType" substitutionGroup="gml:ArcString"/>
	<!-- ================================================= -->
	<xsd:complexType name="ArcType">
		<xsd:annotation>
			<xsd:documentation>
				An Arc is an arc string with only one arc unit, i.e. three control points.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:restriction base="gml:ArcStringType">
				<xsd:sequence>
					<xsd:choice>
						<xsd:annotation>
							<xsd:documentation>GML supports two different ways to specify the control points of a curve segment.
1. A sequence of "pos" (DirectPositionType) or "pointProperty" (PointPropertyType) elements. "pos" elements are control points that are only part of this curve segment, "pointProperty" elements contain a point that may be referenced from other geometry elements or reference another point defined outside of this curve segment (reuse of existing points).
2. The "posList" element allows for a compact way to specifiy the coordinates of the control points, if all control points are in the same coordinate reference systems and belong to this curve segment only. The number of direct positions in the list must be three.</xsd:documentation>
						</xsd:annotation>
						<xsd:choice minOccurs="3" maxOccurs="3">
							<xsd:element ref="gml:pos"/>
							<xsd:element ref="gml:pointProperty"/>
							<xsd:element ref="gml:pointRep">
								<xsd:annotation>
									<xsd:documentation>Deprecated with GML version 3.1.0. Use "pointProperty" instead. Included for backwards compatibility with GML 3.0.0.</xsd:documentation>
								</xsd:annotation>
							</xsd:element>
						</xsd:choice>
						<xsd:element ref="gml:posList"/>
						<xsd:element ref="gml:coordinates">
							<xsd:annotation>
								<xsd:documentation>Deprecated with GML version 3.1.0. Use "posList" instead.</xsd:documentation>
							</xsd:annotation>
						</xsd:element>
					</xsd:choice>
				</xsd:sequence>
				<xsd:attribute name="numArc" type="integer" use="optional" fixed="1">
					<xsd:annotation>
						<xsd:documentation>An arc is an arc string consiting of a single arc, the attribute is fixed to "1".</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:restriction>
		</xsd:complexContent>
	</xsd:complexType>
	<!-- ================================================= -->
	<xsd:complexType name="ArcStringType">
		<xsd:annotation>
			<xsd:documentation>
				An ArcString is a curve segment that uses three-point circular arc interpolation.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="gml:AbstractCurveSegmentType">
				<xsd:sequence>
					<xsd:choice>
						<xsd:annotation>
							<xsd:documentation>GML supports two different ways to specify the control points of a curve segment.
1. A sequence of "pos" (DirectPositionType) or "pointProperty" (PointPropertyType) elements. "pos" elements are control points that are only part of this curve segment, "pointProperty" elements contain a point that may be referenced from other geometry elements or reference another point defined outside of this curve segment (reuse of existing points).
2. The "posList" element allows for a compact way to specifiy the coordinates of the control points, if all control points are in the same coordinate reference systems and belong to this curve segment only. The number of direct positions in the list must be at least three.</xsd:documentation>
						</xsd:annotation>
						<xsd:choice minOccurs="3" maxOccurs="unbounded">
							<xsd:element ref="gml:pos"/>
							<xsd:element ref="gml:pointProperty"/>
							<xsd:element ref="gml:pointRep">
								<xsd:annotation>
									<xsd:documentation>Deprecated with GML version 3.1.0. Use "pointProperty" instead. Included for backwards compatibility with GML 3.0.0.</xsd:documentation>
								</xsd:annotation>
							</xsd:element>
						</xsd:choice>
						<xsd:element ref="gml:posList"/>
						<xsd:element ref="gml:coordinates">
							<xsd:annotation>
								<xsd:documentation>Deprecated with GML version 3.1.0. Use "posList" instead.</xsd:documentation>
							</xsd:annotation>
						</xsd:element>
					</xsd:choice>
				</xsd:sequence>
				<xsd:attribute name="interpolation" type="gml:CurveInterpolationType" fixed="circularArc3Points">
					<xsd:annotation>
						<xsd:documentation>The attribute "interpolation" specifies the curve interpolation mechanism used for this segment. This mechanism
uses the control points and control parameters to determine the position of this curve segment. For an ArcString the interpolation is fixed as "circularArc3Points".</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="numArc" type="integer" use="optional">
					<xsd:annotation>
						<xsd:documentation>The number of arcs in the arc string can be explicitly stated in this attribute. The number of control points in the arc string must be 2 * numArc + 1.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<!-- ================================================= -->
	<xsd:element name="ArcString" type="gml:ArcStringType" substitutionGroup="gml:_CurveSegment"/>
	<!-- ================================================= -->
	<xsd:element name="LineString" type="gml:LineStringType" substitutionGroup="gml:_Curve"/>
	<!-- ================================================= -->
	<xsd:complexType name="LineStringType">
		<xsd:annotation>
			<xsd:documentation>A LineString is a special curve that consists of a single segment with linear interpolation. It is defined by two or more coordinate tuples, with linear interpolation between them. It is backwards compatible with the LineString of GML 2, GM_LineString of ISO 19107 is implemented by LineStringSegment.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="gml:AbstractCurveType">
				<xsd:sequence>
					<xsd:choice>
						<xsd:annotation>
							<xsd:documentation>GML supports two different ways to specify the control points of a line string. 1. A sequence of "pos" (DirectPositionType) or "pointProperty" (PointPropertyType) elements. "pos" elements are control points that are only part of this curve, "pointProperty" elements contain a point that may be referenced from other geometry elements or reference another point defined outside of this curve (reuse of existing points). 2. The "posList" element allows for a compact way to specifiy the coordinates of the control points, if all control points are in the same coordinate reference systems and belong to this curve only. The number of direct positions in the list must be at least two.</xsd:documentation>
						</xsd:annotation>
						<xsd:choice minOccurs="2" maxOccurs="unbounded">
							<xsd:element ref="gml:pos"/>
							<xsd:element ref="gml:pointProperty"/>
							<xsd:element ref="gml:pointRep">
								<xsd:annotation>
									<xsd:documentation>Deprecated with GML version 3.1.0. Use "pointProperty" instead. Included for backwards compatibility with GML 3.0.0.</xsd:documentation>
								</xsd:annotation>
							</xsd:element>
							<xsd:element ref="gml:coord">
								<xsd:annotation>
									<xsd:documentation>Deprecated with GML version 3.0. Use "pos" instead. The "coord" element is included for backwards compatibility with GML 2.</xsd:documentation>
								</xsd:annotation>
							</xsd:element>
						</xsd:choice>
						<xsd:element ref="gml:posList"/>
						<xsd:element ref="gml:coordinates">
							<xsd:annotation>
								<xsd:documentation>Deprecated with GML version 3.1.0. Use "posList" instead.</xsd:documentation>
							</xsd:annotation>
						</xsd:element>
					</xsd:choice>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<!-- ================================================= -->
	<xsd:complexType name="CurvePropertyType">
		<xsd:annotation>
			<xsd:documentation>A property that has a curve as its value domain can either be an appropriate geometry element encapsulated in an element of this type or an XLink reference to a remote geometry element (where remote includes geometry elements located elsewhere in the same document). Either the reference or the contained element must be given, but neither both nor none.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element ref="gml:_Curve" minOccurs="0"/>
		</xsd:sequence>
		<xsd:attributeGroup ref="gml:AssociationAttributeGroup">
			<xsd:annotation>
				<xsd:documentation>This attribute group includes the XLink attributes (see xlinks.xsd). XLink is used in GML to reference remote resources (including those elsewhere in the same document). A simple link element can be constructed by including a specific set of XLink attributes. The XML Linking Language (XLink) is currently a Proposed Recommendation of the World Wide Web Consortium. XLink allows elements to be inserted into XML documents so as to create sophisticated links between resources; such links can be used to reference remote properties. A simple link element can be used to implement pointer functionality, and this functionality has been built into various GML 3 elements by including the gml:AssociationAttributeGroup. 				</xsd:documentation>
			</xsd:annotation>
		</xsd:attributeGroup>
	</xsd:complexType>
	<!-- ================================================= -->
	<xsd:simpleType name="SignType">
		<xsd:annotation>
			<xsd:documentation>Utility type used in various places 
      - e.g. to indicate the direction of topological objects;
      "+" for forwards, or "-" for backwards.</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="string">
			<xsd:enumeration value="-"/>
			<xsd:enumeration value="+"/>
		</xsd:restriction>
	</xsd:simpleType>
	<!-- ================================================= -->
	<xsd:element name="CompositeCurve" type="gml:CompositeCurveType" substitutionGroup="gml:_Curve"/>
	<!-- ================================================= -->
	<xsd:complexType name="CompositeCurveType">
		<xsd:annotation>
			<xsd:documentation>
				A CompositeCurve is defined by a sequence of (orientable) curves such that the each curve in the sequence terminates at the start point of the subsequent curve in the list.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="gml:AbstractCurveType">
				<xsd:sequence>
					<xsd:element ref="gml:curveMember" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:documentation>This element references or contains one curve in the composite curve. The curves are contiguous, the collection of curves is ordered.
NOTE: This definition allows for a nested structure, i.e. a CompositeCurve may use, for example, another CompositeCurve as a curve member.</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<!-- ================================================= -->
	<xsd:element name="curveMember" type="gml:CurvePropertyType">
		<xsd:annotation>
			<xsd:documentation>This property element either references a curve via the XLink-attributes or contains the curve element. A curve element is any element which is substitutable for "_Curve".</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<!-- ================================================= -->
	<xsd:element name="Surface" type="gml:SurfaceType" substitutionGroup="gml:_Surface"/>
	<!-- ================================================= -->
	<xsd:complexType name="SurfaceType">
		<xsd:annotation>
			<xsd:documentation>
				A Surface is a 2-dimensional primitive and is composed of one or more surface patches. The surface patches are connected to one another.
				The orientation of the surface is positive ("up"). The orientation of a surface chooses an "up" direction through the choice of the upward normal, which, if the surface is not a cycle, is the side of the surface from which the exterior boundary appears counterclockwise. Reversal of the surface orientation reverses the curve orientation of each boundary component, and interchanges the conceptual "up" and "down" direction of the surface. If the surface is the boundary of a solid, the "up" direction is usually outward. For closed surfaces, which have no boundary, the up direction is that of the surface patches, which must be consistent with one another. Its included surface patches describe the interior structure of the Surface.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="gml:AbstractSurfaceType">
				<xsd:sequence>
					<xsd:element ref="gml:patches">
						<xsd:annotation>
							<xsd:documentation>This element encapsulates the patches of the surface.</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<!-- ================================================= -->
	<xsd:complexType name="AbstractSurfaceType">
		<xsd:annotation>
			<xsd:documentation>
				An abstraction of a surface to support the different levels of complexity. A surface is always a continuous region of a plane.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="gml:AbstractGeometricPrimitiveType"/>
		</xsd:complexContent>
	</xsd:complexType>
	<!-- ================================================= -->
	<xsd:element name="patches" type="gml:SurfacePatchArrayPropertyType">
		<xsd:annotation>
			<xsd:documentation>This property element contains a list of surface patches. The order of the elements is significant and shall be preserved when processing the array.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<!-- ================================================= -->
	<xsd:complexType name="SurfacePatchArrayPropertyType">
		<xsd:annotation>
			<xsd:documentation>A container for an array of surface patches.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element ref="gml:_SurfacePatch" minOccurs="0" maxOccurs="unbounded"/>
		</xsd:sequence>
	</xsd:complexType>
	<!-- ================================================= -->
	<xsd:element name="_SurfacePatch" type="gml:AbstractSurfacePatchType" abstract="true">
		<xsd:annotation>
			<xsd:documentation>The "_SurfacePatch" element is the abstract head of the substituition group for all surface pach elements describing a continuous portion of a surface.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<!-- ================================================= -->
	<xsd:complexType name="AbstractSurfacePatchType" abstract="true">
		<xsd:annotation>
			<xsd:documentation>
				A surface patch defines a homogenuous portion of a surface.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:complexType>
	<!-- ================================================= -->
	<xsd:element name="_Surface" type="gml:AbstractSurfaceType" abstract="true" substitutionGroup="gml:_GeometricPrimitive">
		<xsd:annotation>
			<xsd:documentation>The "_Surface" element is the abstract head of the substituition group for all (continuous) surface elements.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<!-- ================================================= -->
	<xsd:element name="PolygonPatch" type="gml:PolygonPatchType" substitutionGroup="gml:_SurfacePatch"/>
	<!-- ================================================= -->
	<xsd:complexType name="PolygonPatchType">
		<xsd:annotation>
			<xsd:documentation>
				A PolygonPatch is a surface patch that is defined by a set of boundary curves and an underlying surface to which these curves adhere. The curves are coplanar and the polygon uses planar interpolation in its interior. Implements GM_Polygon of ISO 19107. 
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="gml:AbstractSurfacePatchType">
				<xsd:sequence>
					<xsd:element ref="gml:exterior" minOccurs="0"/>
					<xsd:element ref="gml:interior" minOccurs="0" maxOccurs="unbounded"/>
				</xsd:sequence>
				<xsd:attribute name="interpolation" type="gml:SurfaceInterpolationType" fixed="planar">
					<xsd:annotation>
						<xsd:documentation>The attribute "interpolation" specifies the interpolation mechanism used for this surface patch. Currently only planar surface patches are defined in GML 3, the attribute is fixed to "planar", i.e. the interpolation method shall return points on a single plane. The boundary of the patch shall be contained within that plane.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<!-- ================================================= -->
	<xsd:element name="exterior" type="gml:AbstractRingPropertyType">
		<xsd:annotation>
			<xsd:documentation>A boundary of a surface consists of a number of rings. In the normal 2D case, one of these rings is distinguished as being the exterior boundary. In a general manifold this is not always possible, in which case all boundaries shall be listed as interior boundaries, and the exterior will be empty.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<!-- ================================================= -->
	<xsd:complexType name="AbstractRingPropertyType">
		<xsd:annotation>
			<xsd:documentation>
			        Encapsulates a ring to represent the surface boundary property of a surface.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element ref="gml:_Ring"/>
		</xsd:sequence>
	</xsd:complexType>
	<!-- ================================================= -->
	<xsd:element name="_Ring" type="gml:AbstractRingType" abstract="true" substitutionGroup="gml:_Geometry">
		<xsd:annotation>
			<xsd:documentation>The "_Ring" element is the abstract head of the substituition group for all closed boundaries of a surface patch.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<!-- ================================================= -->
	<xsd:complexType name="AbstractRingType" abstract="true">
		<xsd:annotation>
			<xsd:documentation>
				An abstraction of a ring to support surface boundaries of different complexity.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="gml:AbstractGeometryType"/>
		</xsd:complexContent>
	</xsd:complexType>
	<!-- ================================================= -->
	<xsd:element name="interior" type="gml:AbstractRingPropertyType">
		<xsd:annotation>
			<xsd:documentation>A boundary of a surface consists of a number of rings. The "interior" rings seperate the surface / surface patch from the area enclosed by the rings.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<!-- ================================================= -->
	<xsd:simpleType name="SurfaceInterpolationType">
		<xsd:annotation>
			<xsd:documentation>SurfaceInterpolationType is a list of codes that may be used to identify the interpolation mechanisms specified by an
application schema.</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="string">
			<xsd:enumeration value="none"/>
			<xsd:enumeration value="planar"/>
			<xsd:enumeration value="spherical"/>
			<xsd:enumeration value="elliptical"/>
			<xsd:enumeration value="conic"/>
			<xsd:enumeration value="tin"/>
			<xsd:enumeration value="parametricCurve"/>
			<xsd:enumeration value="polynomialSpline"/>
			<xsd:enumeration value="rationalSpline"/>
			<xsd:enumeration value="triangulatedSpline"/>
		</xsd:restriction>
	</xsd:simpleType>
	<!-- ================================================= -->
	<xsd:element name="Polygon" type="gml:PolygonType" substitutionGroup="gml:_Surface"/>
	<!-- ================================================= -->
	<xsd:complexType name="PolygonType">
		<xsd:annotation>
			<xsd:documentation>A Polygon is a special surface that is defined by a single surface patch. The boundary of this patch is coplanar and the polygon uses planar interpolation in its interior. It is backwards compatible with the Polygon of GML 2, GM_Polygon of ISO 19107 is implemented by PolygonPatch.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="gml:AbstractSurfaceType">
				<xsd:sequence>
					<xsd:element ref="gml:exterior" minOccurs="0"/>
					<xsd:element ref="gml:interior" minOccurs="0" maxOccurs="unbounded"/>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<!-- ================================================= -->
	<xsd:complexType name="SurfacePropertyType">
		<xsd:annotation>
			<xsd:documentation>A property that has a surface as its value domain can either be an appropriate geometry element encapsulated in an element of this type or an XLink reference to a remote geometry element (where remote includes geometry elements located elsewhere in the same document). Either the reference or the contained element must be given, but neither both nor none.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element ref="gml:_Surface" minOccurs="0"/>
		</xsd:sequence>
		<xsd:attributeGroup ref="gml:AssociationAttributeGroup">
			<xsd:annotation>
				<xsd:documentation>This attribute group includes the XLink attributes (see xlinks.xsd). XLink is used in GML to reference remote resources (including those elsewhere in the same document). A simple link element can be constructed by including a specific set of XLink attributes. The XML Linking Language (XLink) is currently a Proposed Recommendation of the World Wide Web Consortium. XLink allows elements to be inserted into XML documents so as to create sophisticated links between resources; such links can be used to reference remote properties.
A simple link element can be used to implement pointer functionality, and this functionality has been built into various GML 3 elements by including the gml:AssociationAttributeGroup.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attributeGroup>
	</xsd:complexType>
	<!-- ================================================= -->
	<xsd:element name="Ring" type="gml:RingType" substitutionGroup="gml:_Ring"/>
	<!-- ================================================= -->
	<xsd:complexType name="RingType">
		<xsd:annotation>
			<xsd:documentation>A Ring is used to represent a single connected component of a surface boundary. It consists of a sequence of curves connected in a cycle (an object whose boundary is empty).
A Ring is structurally similar to a composite curve in that the endPoint of each curve in the sequence is the startPoint of the next curve in the Sequence. Since the sequence is circular, there is no exception to this rule. Each ring, like all boundaries, is a cycle and each ring is simple.
NOTE: Even though each Ring is simple, the boundary need not be simple. The easiest case of this is where one of the interior rings of a surface is tangent to its exterior ring.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="gml:AbstractRingType">
				<xsd:sequence>
					<xsd:element ref="gml:curveMember" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:documentation>This element references or contains one curve in the composite curve. The curves are contiguous, the collection of curves is ordered.
NOTE: This definition allows for a nested structure, i.e. a CompositeCurve may use, for example, another CompositeCurve as a curve member.</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<!-- ================================================= -->
	<xsd:element name="LinearRing" type="gml:LinearRingType" substitutionGroup="gml:_Ring"/>
	<!-- ================================================= -->
	<xsd:complexType name="LinearRingType">
		<xsd:annotation>
			<xsd:documentation>A LinearRing is defined by four or more coordinate tuples, with linear interpolation between them; the first and last coordinates must be coincident.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="gml:AbstractRingType">
				<xsd:sequence>
					<xsd:choice>
						<xsd:annotation>
							<xsd:documentation>GML supports two different ways to specify the control points of a linear ring.
1. A sequence of "pos" (DirectPositionType) or "pointProperty" (PointPropertyType) elements. "pos" elements are control points that are only part of this ring, "pointProperty" elements contain a point that may be referenced from other geometry elements or reference another point defined outside of this ring (reuse of existing points).
2. The "posList" element allows for a compact way to specifiy the coordinates of the control points, if all control points are in the same coordinate reference systems and belong to this ring only. The number of direct positions in the list must be at least four.</xsd:documentation>
						</xsd:annotation>
						<xsd:choice minOccurs="4" maxOccurs="unbounded">
							<xsd:element ref="gml:pos"/>
							<xsd:element ref="gml:pointProperty"/>
							<xsd:element ref="gml:pointRep">
								<xsd:annotation>
									<xsd:documentation>Deprecated with GML version 3.1.0. Use "pointProperty" instead. Included for backwards compatibility with GML 3.0.0.</xsd:documentation>
								</xsd:annotation>
							</xsd:element>
						</xsd:choice>
						<xsd:element ref="gml:posList"/>
						<xsd:element ref="gml:coordinates">
							<xsd:annotation>
								<xsd:documentation>Deprecated with GML version 3.1.0. Use "posList" instead.</xsd:documentation>
							</xsd:annotation>
						</xsd:element>
						<xsd:element ref="gml:coord" minOccurs="4" maxOccurs="unbounded">
							<xsd:annotation>
								<xsd:documentation>Deprecated with GML version 3.0 and included for backwards compatibility with GML 2. Use "pos" elements instead.</xsd:documentation>
							</xsd:annotation>
						</xsd:element>
					</xsd:choice>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<!-- ================================================= -->
	<xsd:element name="surfaceProperty" type="gml:SurfacePropertyType">
		<xsd:annotation>
			<xsd:appinfo>
				<sch:pattern>
					<sch:rule context="gml:surfaceProperty">
						<sch:extends rule="hrefOrContent"/>
					</sch:rule>
				</sch:pattern>
			</xsd:appinfo>
			<xsd:documentation>This property element either references a surface via the XLink-attributes or contains the surface element. surfaceProperty is the predefined property which can be used by GML Application Schemas whenever a GML Feature has a property with a value that is substitutable for _Surface.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<!-- ================================================= -->
	<xsd:element name="curveProperty" type="gml:CurvePropertyType">
		<xsd:annotation>
			<xsd:appinfo>
				<sch:pattern>
					<sch:rule context="gml:curveProperty">
						<sch:extends rule="hrefOrContent"/>
					</sch:rule>
				</sch:pattern>
			</xsd:appinfo>
			<xsd:documentation>This property element either references a curve via the XLink-attributes or contains the curve element. curveProperty is the predefined property which can be used by GML Application Schemas whenever a GML Feature has a property with a value that is substitutable for _Curve.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<!-- =========================================================== -->
	<!--<element name="location">
		<annotation>
			<documentation>Deprecated in GML 3.1.0</documentation>
		</annotation>
		<complexType>
			<annotation>
				<documentation>Convenience property for generalised location.  
	      A representative location for plotting or analysis.  
	      Often augmented by one or more additional geometry properties with more specific semantics.  </documentation>
				<documentation>Deprecated in GML 3.1.0</documentation>
			</annotation>
			<sequence>
				<element ref="gml:Null"/>
			</sequence>
		</complexType>
	</element>-->
	<!-- =========================================================== -->
	<xsd:element name="location" type="gml:LocationPropertyType">
		<xsd:annotation>
			<xsd:documentation>Deprecated in GML 3.1.0</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<!-- ============================================================== -->
	<xsd:complexType name="LocationPropertyType">
		<xsd:annotation>
			<xsd:documentation>Convenience property for generalised location.  
      A representative location for plotting or analysis.  
      Often augmented by one or more additional geometry properties with more specific semantics.  </xsd:documentation>
			<xsd:documentation>Deprecated in GML 3.1.0</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:choice>
				<xsd:element ref="gml:_Geometry"/>
				<xsd:element ref="gml:LocationKeyWord"/>
				<xsd:element ref="gml:LocationString"/>
				<xsd:element ref="gml:Null"/>
			</xsd:choice>
		</xsd:sequence>
		<xsd:attributeGroup ref="gml:AssociationAttributeGroup"/>
	</xsd:complexType>
	<!-- ============================================================== -->
	<xsd:element name="LocationKeyWord" type="gml:CodeType"/>
	<xsd:element name="LocationString" type="gml:StringOrRefType"/>
	<!-- =========================================================== -->
	<xsd:element name="_GeometricAggregate" type="gml:AbstractGeometricAggregateType" abstract="true" substitutionGroup="gml:_Geometry">
		<xsd:annotation>
			<xsd:documentation>The "_GeometricAggregate" element is the abstract head of the substituition group for all geometric aggremates.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<!-- =========================================================== -->
	<xsd:complexType name="AbstractGeometricAggregateType" abstract="true">
		<xsd:annotation>
			<xsd:documentation>This is the abstract root type of the geometric aggregates.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="gml:AbstractGeometryType"/>
		</xsd:complexContent>
	</xsd:complexType>
	<!-- =========================================================== -->
	<xsd:element name="MultiPoint" type="gml:MultiPointType" substitutionGroup="gml:_GeometricAggregate"/>
	<!-- ======================================================= -->
	<xsd:complexType name="MultiPointType">
		<xsd:annotation>
			<xsd:documentation>
				A MultiPoint is defined by one or more Points, referenced through pointMember elements.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="gml:AbstractGeometricAggregateType">
				<xsd:sequence>
					<xsd:annotation>
						<xsd:documentation>The members of the geometric aggregate can be specified either using the "standard" property or the array property style. It is also valid to use both the "standard" and the array property style in the same collection.
NOTE: Array properties cannot reference remote geometry elements.</xsd:documentation>
					</xsd:annotation>
					<xsd:element ref="gml:pointMember" minOccurs="0" maxOccurs="unbounded"/>
					<xsd:element ref="gml:pointMembers" minOccurs="0"/>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<!-- =========================================================== -->
	<xsd:complexType name="MultiPointPropertyType">
		<xsd:annotation>
			<xsd:documentation>A property that has a collection of points as its value domain can either be an appropriate geometry element encapsulated in an element of this type or an XLink reference to a remote geometry element (where remote includes geometry elements located elsewhere in the same document). Either the reference or the contained element must be given, but neither both nor none.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element ref="gml:MultiPoint" minOccurs="0"/>
		</xsd:sequence>
		<xsd:attributeGroup ref="gml:AssociationAttributeGroup">
			<xsd:annotation>
				<xsd:documentation>This attribute group includes the XLink attributes (see xlinks.xsd). XLink is used in GML to reference remote resources (including those elsewhere in the same document). A simple link element can be constructed by including a specific set of XLink attributes. The XML Linking Language (XLink) is currently a Proposed Recommendation of the World Wide Web Consortium. XLink allows elements to be inserted into XML documents so as to create sophisticated links between resources; such links can be used to reference remote properties.
A simple link element can be used to implement pointer functionality, and this functionality has been built into various GML 3 elements by including the gml:AssociationAttributeGroup.</xsd:documentation>
			</xsd:annotation>
		</xsd:attributeGroup>
	</xsd:complexType>
	<!-- =========================================================== -->
	<xsd:element name="MultiCurve" type="gml:MultiCurveType" substitutionGroup="gml:_GeometricAggregate"/>
	<!-- ======================================================= -->
	<xsd:complexType name="MultiCurveType">
		<xsd:annotation>
			<xsd:documentation>
				A MultiCurve is defined by one or more Curves, referenced through curveMember elements.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="gml:AbstractGeometricAggregateType">
				<xsd:sequence>
					<xsd:annotation>
						<xsd:documentation>The members of the geometric aggregate can be specified either using the "standard" property or the array property style. It is also valid to use both the "standard" and the array property style in the same collection.
NOTE: Array properties cannot reference remote geometry elements.</xsd:documentation>
					</xsd:annotation>
					<xsd:element ref="gml:curveMember" minOccurs="0" maxOccurs="unbounded"/>
					<xsd:element ref="gml:curveMembers" minOccurs="0"/>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<!-- =========================================================== -->
	<xsd:complexType name="MultiCurvePropertyType">
		<xsd:annotation>
			<xsd:documentation>A property that has a collection of curves as its value domain can either be an appropriate geometry element encapsulated in an element of this type or an XLink reference to a remote geometry element (where remote includes geometry elements located elsewhere in the same document). Either the reference or the contained element must be given, but neither both nor none.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element ref="gml:MultiCurve" minOccurs="0"/>
		</xsd:sequence>
		<xsd:attributeGroup ref="gml:AssociationAttributeGroup">
			<xsd:annotation>
				<xsd:documentation>This attribute group includes the XLink attributes (see xlinks.xsd). XLink is used in GML to reference remote resources (including those elsewhere in the same document). A simple link element can be constructed by including a specific set of XLink attributes. The XML Linking Language (XLink) is currently a Proposed Recommendation of the World Wide Web Consortium. XLink allows elements to be inserted into XML documents so as to create sophisticated links between resources; such links can be used to reference remote properties.
A simple link element can be used to implement pointer functionality, and this functionality has been built into various GML 3 elements by including the gml:AssociationAttributeGroup.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attributeGroup>
	</xsd:complexType>
	<!-- =========================================================== -->
	<xsd:element name="MultiSurface" type="gml:MultiSurfaceType" substitutionGroup="gml:_GeometricAggregate"/>
	<!-- ======================================================= -->
	<xsd:complexType name="MultiSurfaceType">
		<xsd:annotation>
			<xsd:documentation>
				A MultiSurface is defined by one or more Surfaces, referenced through surfaceMember elements. 
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="gml:AbstractGeometricAggregateType">
				<xsd:sequence>
					<xsd:annotation>
						<xsd:documentation>The members of the geometric aggregate can be specified either using the "standard" property or the array property style. It is also valid to use both the "standard" and the array property style in the same collection.
NOTE: Array properties cannot reference remote geometry elements.</xsd:documentation>
					</xsd:annotation>
					<xsd:element ref="gml:surfaceMember" minOccurs="0" maxOccurs="unbounded"/>
					<xsd:element ref="gml:surfaceMembers" minOccurs="0"/>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<!-- =========================================================== -->
	<xsd:complexType name="MultiSurfacePropertyType">
		<xsd:annotation>
			<xsd:documentation>A property that has a collection of surfaces as its value domain can either be an appropriate geometry element encapsulated in an element of this type or an XLink reference to a remote geometry element (where remote includes geometry elements located elsewhere in the same document). Either the reference or the contained element must be given, but neither both nor none.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element ref="gml:MultiSurface" minOccurs="0"/>
		</xsd:sequence>
		<xsd:attributeGroup ref="gml:AssociationAttributeGroup">
			<xsd:annotation>
				<xsd:documentation>This attribute group includes the XLink attributes (see xlinks.xsd). XLink is used in GML to reference remote resources (including those elsewhere in the same document). A simple link element can be constructed by including a specific set of XLink attributes. The XML Linking Language (XLink) is currently a Proposed Recommendation of the World Wide Web Consortium. XLink allows elements to be inserted into XML documents so as to create sophisticated links between resources; such links can be used to reference remote properties.
A simple link element can be used to implement pointer functionality, and this functionality has been built into various GML 3 elements by including the gml:AssociationAttributeGroup.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attributeGroup>
	</xsd:complexType>
	<!-- =========================================================== -->
	<xsd:element name="pointMember" type="gml:PointPropertyType">
		<xsd:annotation>
			<xsd:documentation>This property element either references a Point via the XLink-attributes or contains the Point element.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:element name="pointMembers" type="gml:PointArrayPropertyType">
		<xsd:annotation>
			<xsd:documentation>This property element contains a list of points. The order of the elements is significant and shall be preserved when processing the array.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:element name="curveMembers" type="gml:CurveArrayPropertyType">
		<xsd:annotation>
			<xsd:documentation>This property element contains a list of curves. The order of the elements is significant and shall be preserved when processing the array.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:element name="surfaceMember" type="gml:SurfacePropertyType">
		<xsd:annotation>
			<xsd:documentation>This property element either references a surface via the XLink-attributes or contains the surface element. A surface element is any element which is substitutable for "_Surface".</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:element name="surfaceMembers" type="gml:SurfaceArrayPropertyType">
		<xsd:annotation>
			<xsd:documentation>This property element contains a list of surfaces. The order of the elements is significant and shall be preserved when processing the array.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<!-- =========================================================== -->
	<xsd:complexType name="PointArrayPropertyType">
		<xsd:annotation>
			<xsd:documentation>A container for an array of points. The elements are always contained in the array property, referencing geometry elements or arrays of geometry elements is not supported.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element ref="gml:Point" minOccurs="0" maxOccurs="unbounded"/>
		</xsd:sequence>
	</xsd:complexType>
	<!-- =========================================================== -->
	<xsd:complexType name="CurveArrayPropertyType">
		<xsd:annotation>
			<xsd:documentation>A container for an array of curves. The elements are always contained in the array property, referencing geometry elements or arrays of geometry elements is not supported.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element ref="gml:_Curve" minOccurs="0" maxOccurs="unbounded"/>
		</xsd:sequence>
	</xsd:complexType>
	<!-- =========================================================== -->
	<xsd:complexType name="SurfaceArrayPropertyType">
		<xsd:annotation>
			<xsd:documentation>A container for an array of surfaces. The elements are always contained in the array property, referencing geometry elements or arrays of geometry elements is not supported.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element ref="gml:_Surface" minOccurs="0" maxOccurs="unbounded"/>
		</xsd:sequence>
	</xsd:complexType>
	<!-- =========================================================== -->
	<xsd:element name="CompositeSurface" type="gml:CompositeSurfaceType" substitutionGroup="gml:_Surface"/>
	<!-- =========================================================== -->
	<xsd:complexType name="CompositeSurfaceType">
		<xsd:annotation>
			<xsd:documentation>A CompositeSurface is defined by a set of orientable surfaces. A composite surface is geometry type with all the geometric properties of a (primitive) surface. Essentially, a composite surface is a collection of surfaces that join in pairs on common boundary curves and which, when considered as a whole, form a single surface. </xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="gml:AbstractSurfaceType">
				<xsd:sequence>
					<xsd:element ref="gml:surfaceMember" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:documentation>This element references or contains one surface in the composite surface. The surfaces are contiguous.
NOTE: This definition allows for a nested structure, i.e. a CompositeSurface may use, for example, another CompositeSurface as a member.</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<!-- =========================================================== -->
	<xsd:element name="MultiGeometry" type="gml:MultiGeometryType" substitutionGroup="gml:_GeometricAggregate"/>
	<!-- ======================================================= -->
	<xsd:complexType name="MultiGeometryType">
		<xsd:annotation>
			<xsd:documentation>
				A geometry collection must include one or more geometries, referenced through geometryMember elements.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="gml:AbstractGeometricAggregateType">
				<xsd:sequence>
					<xsd:annotation>
						<xsd:documentation>The members of the geometric aggregate can be specified either using the "standard" property or the array property style. It is also valid to use both the "standard" and the array property style in the same collection.
NOTE: Array properties cannot reference remote geometry elements.</xsd:documentation>
					</xsd:annotation>
					<xsd:element ref="gml:geometryMember" minOccurs="0" maxOccurs="unbounded"/>
					<xsd:element ref="gml:geometryMembers" minOccurs="0"/>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<!-- =========================================================== -->
	<xsd:element name="geometryMember" type="gml:GeometryPropertyType">
		<xsd:annotation>
			<xsd:documentation>This property element either references a geometry element via the XLink-attributes or contains the geometry element.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:element name="geometryMembers" type="gml:GeometryArrayPropertyType">
		<xsd:annotation>
			<xsd:documentation>This property element contains a list of geometry elements. The order of the elements is significant and shall be preserved when processing the array.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<!-- ============================================================== -->
	<xsd:complexType name="GeometryArrayPropertyType">
		<xsd:annotation>
			<xsd:documentation>A container for an array of geometry elements. The elements are always contained in the array property, referencing geometry elements or arrays of geometry elements is not supported.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element ref="gml:_Geometry" minOccurs="0" maxOccurs="unbounded"/>
		</xsd:sequence>
	</xsd:complexType>
	<!-- =========================================================== -->
</xsd:schema>
